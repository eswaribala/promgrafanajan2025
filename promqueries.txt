1. Basic Queries
up – Check if targets are up.
node_cpu_seconds_total – Get raw CPU usage data.
node_memory_MemAvailable_bytes – Available memory.
node_filesystem_size_bytes – Total disk space.
node_network_receive_bytes_total – Total received network bytes.
============================================
2. Label Filtering
node_cpu_seconds_total{mode="idle"} – Filter by CPU idle time.
http_requests_total{status="500"} – Filter HTTP 500 responses.
node_filesystem_avail_bytes{mountpoint="/"} – Free space on root.
node_network_transmit_bytes_total{device="eth0"} – Outgoing traffic on eth0.
node_load1{instance="localhost:9100"} – System load for a specific instance.
================================================================
3. Aggregation Functions
sum(node_cpu_seconds_total) – Total CPU usage.
avg(node_cpu_seconds_total) – Average CPU time.
max(node_memory_MemAvailable_bytes) – Max available memory.
min(node_filesystem_free_bytes) – Min available disk space.
count(node_network_receive_bytes_total) – Count of network devices.
================================================================
4. Rate Calculations
rate(node_cpu_seconds_total[5m]) – CPU usage rate over 5 minutes.
rate(http_requests_total[1m]) – HTTP request rate.
irate(node_network_receive_bytes_total[30s]) – Instantaneous network traffic rate.
increase(http_requests_total[1h]) – Increase in HTTP requests over 1 hour.
delta(node_cpu_seconds_total[5m]) – Change in CPU usage.
===================================================================
5. CPU Metrics
100 * (1 - avg(rate(node_cpu_seconds_total{mode="idle"}[5m]))) – CPU utilization percentage.
sum(rate(node_cpu_seconds_total{mode!="idle"}[5m])) by (instance) – Non-idle CPU usage per instance.
avg_over_time(node_load1[1h]) – Average system load.
topk(5, rate(node_cpu_seconds_total[5m])) – Top 5 CPU-consuming instances.
count(rate(node_cpu_seconds_total[1m])) – Active CPU cores.
==========================================================
6. Memory Monitoring
node_memory_MemTotal_bytes - node_memory_MemFree_bytes – Used memory.
node_memory_Active_bytes / node_memory_MemTotal_bytes * 100 – Active memory percentage.
sum(node_memory_Cached_bytes) by (instance) – Cached memory usage.
max(rate(node_memory_SwapTotal_bytes[1h])) – Max swap usage.
node_memory_Buffers_bytes / node_memory_MemTotal_bytes * 100 – Buffered memory percentage.
============================================================================================================
7. Disk Monitoring
node_filesystem_avail_bytes{mountpoint="/"} – Free space in root.
rate(node_disk_read_bytes_total[5m]) – Disk read rate.
rate(node_disk_written_bytes_total[5m]) – Disk write rate.
sum(node_disk_io_time_seconds_total{device="sda"}) – Total disk I/O time.
(node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100 – Disk usage percentage.
================================================================================
8. Network Monitoring
rate(node_network_receive_bytes_total[5m]) – Incoming traffic.
rate(node_network_transmit_bytes_total[5m]) – Outgoing traffic.
avg(node_network_transmit_errs_total) by (instance) – Network transmit errors.
sum(rate(node_network_packets_dropped_total[1h])) – Dropped network packets.
node_sockstat_TCP_alloc – Active TCP connections.
==================================================================================
9. HTTP Application Metrics
rate(http_requests_total[5m]) – HTTP request rate.
histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) – 95th percentile response time.
sum(http_requests_total{method="GET"}) – Count of GET requests.
sum(rate(http_requests_total[5m])) by (method) – Request rate by method.
sum(http_requests_total{status=~"5.."}) – Count of 5xx errors.
=======================================================================================
10. Error Rate Monitoring
sum(rate(http_requests_total{status=~"5.."}[5m])) / sum(rate(http_requests_total[5m])) * 100 – HTTP 5xx error rate.
increase(http_requests_total{status=~"4.."}[1h]) – Increase in 4xx errors.
rate(http_requests_total{status=~"2.."}[5m]) – 2xx success request rate.
topk(5, http_requests_total) – Top 5 endpoints by request count.
count(http_requests_total{status=~"4.."}) – Count of 4xx errors.
==================================================================================
11. Response Time Analysis
histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m])) – 99th percentile latency.
histogram_quantile(0.50, rate(http_request_duration_seconds_bucket[5m])) – Median latency.
avg(rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])) – Average response time.
rate(http_request_duration_seconds_bucket{le="0.1"}[5m]) – Requests under 100ms.
sum(rate(http_request_duration_seconds_count[5m])) – Total request count.
=======================================================================================
12. Advanced Queries
predict_linear(node_cpu_seconds_total[5m], 3600) – Predict CPU usage in the next hour.
stddev_over_time(node_load1[1h]) – Standard deviation of system load.
rate(process_resident_memory_bytes[5m]) – Resident memory usage rate.
sum_over_time(http_requests_total[1h]) – Total HTTP requests over an hour.
count(node_network_receive_bytes_total > 0) – Active network interfaces.
============================================================================================
